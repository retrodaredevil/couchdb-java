import java.time.Duration

buildscript {
    ext {
        junit5Version = '5.11.3' // https://junit.org/junit5/
        junit5PlatformVersion = '1.11.3'

        slf4jVersion = '2.0.16' // http://www.slf4j.org/download.html
        // TODO bump Jackson version, but also consider if we care about keeping Android compatibility for SDK versions < 26
        // https://github.com/FasterXML/jackson/wiki/Jackson-Releases
        jacksonVersion = '2.13.0' // https://github.com/FasterXML/jackson-databind/releases
        // retrofit is why we need allow-opens. context: https://stackoverflow.com/questions/60915381/retrofit2-maven-project-illegal-reflective-access-warning // https://github.com/square/retrofit/issues/3341
        retrofitVersion = "2.11.0" // https://github.com/square/retrofit/releases
        okhttpVersion = "4.12.0" // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
        dockerComposePluginVersion = "0.17.11" // https://github.com/avast/gradle-docker-compose-plugin/releases
    }
}

plugins {
    id "com.avast.gradle.docker-compose" version "$dockerComposePluginVersion"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'docker-compose'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    repositories {
        maven { url "https://repo.maven.apache.org/maven2" }
    }
    dependencies {
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
        testImplementation "org.junit.platform:junit-platform-commons:$junit5PlatformVersion"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version

        implementation 'org.jetbrains:annotations:21.0.1' // https://search.maven.org/search?q=g:org.jetbrains%20AND%20a:annotations
    }
    test {
        useJUnitPlatform {
            excludeTags 'integration'
        }
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            // If we don't have this, we get warnings for something about retrofit2.Platform
            jvmArgs "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED"
        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile){
            options.compilerArgs << "-Xlint:deprecation"
        }
    }
    task integration(type: Test) {
        useJUnitPlatform {
            includeTags 'integration'
        }
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            // If we don't have this, we get warnings for something about retrofit2.Platform
            jvmArgs "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED"
        }
    }
    dockerCompose {
        useComposeFiles = ['../testing/docker-compose.yml']
        isRequiredBy integration
        waitForTcpPortsTimeout = Duration.ofMinutes(1)
    }
}

wrapper {
    gradleVersion = '8.11.1'
    distributionType = Wrapper.DistributionType.ALL
}
